alphabet

// l'alphabet recouvre l'ensemble des lettres qui peuvent composer un mot en français,
// par ordre alphabétique pour cette langue
// les diacritiques apparaissent dans l'ordre : aigu, grave, circonflexe puis tréma
a à â æ b c ç d e é è ê ë f g h i î ï j k l m n o ô œ p q r s t u ù û ü v w x y ÿ zi - ;

categories

nom as N
verbe as V
préposition as P
adjectif as Adj
adverbe as Adv
déterminant as Det
auxiliaire as Aux
conjonction as Conj
complémenteur as C
négation as Neg

tags

clitique as Cl
commun as Comm
interrogratif as Qu

être as E
masculin as Masc
féminin as Fém
singulier as Sg
pluriel as Pl

// modes
mode {
  indicatif as Ind
  impératif as Imper
  subjonctif as Subj
  conditionnel as Cond
}

// temps
temps {
  présent as Prés
  passé-simple as PassSimp
  passé-composé as PacsComp
  futur as Fut
  imparfait as Imp
  plus-que-parfait as Pqp
}

// rôles thématiques
role {
  agent as Ag
  thème as Th
  patient as Pat
  psy-chose as Psy
  instrument as Inst
  locatif as Loc
  but as But
  source as Src
}

premier-groupe as G1
deuxième-groupe as G2
troisième-groupe as G3

première-personne as 1ère
deuxième-personne as 2ème
troisième-personne as 3ème

main = Français ;

lexikon Français {

  manger &VG1 ;
  tracer &VG1 ;
  danser &VG1 ;

}

lexikon Genre {
  +Masc ;
  +Fém ;
}

// `@V` signifie que la catégorie `V` est affectée au mot en entrée de ce lexique
lexikon VG1 @V +G1 {

  // transitions ajoutées à la fin du Fts précédent
  // VG1 suit `manger` par exemple, donc `mangerai` est annoté (une fois `Sg1` expansé)
  // `manger{V +G1}ai{+Fut +Ind +Sg +1ère}`
  ai +Fut +Ind &Sg1 ;
  as +Fut +Ind &Sg2 ;
  a +Fut +Ind &Sg3 ;
  ons +Fut +Ind &Pl1 ;
  ez +Fut +Ind &Pl2 ;
  ont +Fut +Ind &Pl3 ;

  rewrite présent-indicatif +Prés +Ind {
    // ce cas signifie que le suffixe `r` (noté `>r`, un préfixe est noté `r<`)
    // est remplacé par une transition vide
    // qui ajoute les traits +Sg et +1ère
    // ainsi `mange` est annoté comme suit:
    // `manger{V +G1 +Fut +Ind +Sg +1ère}`
    // cette règle est équivalente à la suite de transitions suivante :
    // `mange _/r @V +G1 +Fut +Ind +Sg +1ère`
    rule >r => _ &Sg1 ;
    rule >r => s &Sg2 ;
    // avec cette règle nous voyons que `mange` est annoté comme
    // {V +G1 +Prés +Ind +Sg +1ère} et comme
    // {V +G1 +Prés +Ind +Sg +3er}
    rule >r => >_ &Sg3 ;
    // ici nous écrivons un patron plus complexe avec des sous-cas
    // les sous-cas sont appliqués en séquence, et le premier qui correspond
    // est choisi. Si aucun ne correspond la règle ne s'applique pas ici.
    // contrairement aux `rule`s dont l'ordre n'a pas d'importance, il faut veiller
    // ici à correctement ordonner les cas afin que les plus spécifiques arrivent avant
    // les plus généraux
    rule >ger => >geons &Pl1
       | >cer => >çons &Pl1
       | >er => >ons &Pl1 ;
    rule >r => >z &Pl2 ;
    rule >r => >nt &Pl3 ;
  }

  rewrite passé-simple-indicatif +PassSimp +Ind {
    rule >ger => >geai &Sg1
       | >cer => >çai &Sg1
       | >er => >ai &Sg1 ;
    rule >ger => >geas &Sg2
       | >cer => >ças &Sg2
       | >er => >as &Sg2 ;
    rule >ger => >gea &Sg3
       | >cer => >ça &Sg3
       | >er => >a &Sg3 ;
    rule >ger => >geâmes &Pl1
       | >cer => >çâmes &Pl1
       | >er => >âmes &Pl1 ;
    rule >ger => >geâtes &Pl2
       | >cer => >çâtes &Pl2
       | >er => >âtes &Pl2 ;
    rule >er => >èrent &Pl3 ;
  }

  rewrite imparfait-indicatif +Imp +Ind {
    rule >ger => >geais &Sg1
       | >cer => >çais &Sg1
       | >er => >ais &Sg1 ;
    rule >ger => >geais &Sg2
       | >cer => >çais &Sg2
       | >er => >ais &Sg2 ;
    rule >ger => >geait &Sg3
       | >cer => >çait &Sg3
       | >er => >ait &Sg3 ;
    rule >er => >ions &Pl1 ;
    rule >er => >iez &Pl2 ;
    rule >ger => >geaient &Pl3
       | >cer => >çaient &Pl3
       | >er => >aient &Pl3 ;
  }

}

lexikon Sg1 +Sg +1ère ;
lexikon Sg2 +Sg +2ème ;
lexikon Sg3 +Sg +3ème ;
lexikon Pl1 +Pl +1ère ;
lexikon Pl2 +Pl +2ème ;
lexikon Pl3 +Pl +3ème ;
