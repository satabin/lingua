alphabet

// l'alphabet recouvre l'ensemble des lettres qui peuvent composer un mot en français,
// par ordre alphabétique pour cette langue
// les diacritiques apparaissent dans l'ordre : aigu, grave, circonflexe puis tréma
a à â æ b c ç d e é è ê ë f g h i î ï j k l m n o ô œ p q r s t u ù û ü v w x y ÿ z ;

separators

- ’ ;

categories

nom as N;
verbe as V;
préposition as P;
adjectif as Adj;
adverbe as Adv;
déterminant as Det;
conjonction as Conj;
complémenteur as C;
négation as Neg;

tags

clitique as Cl;
commun as Comm;
interrogratif as Qu;

// pour les noms composés, les traits indiquent comment ils sont faits
// le trait NC (et ses enfants) sont marqués comme `private`, ce qui signifie
// qu’il ne sont utilisés que pour construire le Fst mais ne seront pas exportés
// dans le résultat
private nom-composé as NC {
  verbe-nom as VN;
  verbe-nom-indénombrable as VNI;
  nom-nom as NN;
  nom-nom-indénombrable as NNI;
  nom-adjectif as NAdj;
  adjectif-nom as AdjN;
  adverbe-nom as AdvN;
}

// deux auxiliaires existent, être et avoir
auxiliaire as Aux {
  être as E;
  avoir as A;
}

// les marqueurs de nombre
nombre as Nb {
  singulier as Sg;
  pluriel as Pl;
}

// les genres
genre as G {
  masculin as Masc;
  féminin as Fém;
}

// modes
mode as M {
  indicatif as Ind;
  impératif as Imper;
  subjonctif as Subj;
  conditionnel as Cond;
}

// temps
temps as Tps {
  présent as Prés;
  passé-simple as PassSimp;
  passé-composé as PacsComp;
  futur as Fut;
  imparfait as Imp;
  plus-que-parfait as Pqp;
}

// rôles thématiques
role as R {
  agent as Ag;
  thème as Th;
  patient as Pat;
  psy-chose as Psy;
  instrument as Inst;
  locatif as Loc;
  but as But;
  source as Src;
}

premier-groupe as G1;
deuxième-groupe as G2;
troisième-groupe as G3;

première-personne as 1ère;
deuxième-personne as 2ème;
troisième-personne as 3ème;

private exception as Exn;

lexicon Nom @N {

  arbre / +Masc ;

  chasse-neige / +Masc +VNI ;
  tire-bouchon / +Masc +VN ;
  chou-fleur / +Masc +NN ;
  timbre-poste / +Masc +NNI ;
  grand-mère / +Fém +AdjN ;
  coffre-fort / +Masc +NAdj ;
  micro-onde / +Masc +AdjN ;
  arrière-boutique / +Fém +AdvN ;
  pince-sans-rire / +Fém ;
  pince-sans-rire / +Masc ;

}

// pour les noms composés d'un verbe et d'un nom, seul le nom prend la marque
// du pluriel s'il est dénombrable, sinon le nom reste invariable
rewrite pluriel @N => +Pl {
  ..al / -Exn -NC => ..aux
  | ..eau / -NC => ..eaux
  | .. / -NC => ..s
  // après la flèche, le `..` indique la première ascription `..` avant la flèche
  // après la flèche, le `..` indique la deuxième ascription `..` avant la flèche
  | ..-.. / +VNI => ..-..
  // la notation @(..) indique que la règle de réécriture courante est appliquée au résulat
  // du remplacement entre parenthèses de manière récursive. Le résultat a la même catégorie
  // et aucune étiquette
  | ..-.. / +VN  => ..-@(..)

  | ..-.. / +NNI => @(..)-..
  | ..-.. / +NN => @(..)-@(..)

  // utiliser `..` après la flèche fait référence aux captures du pattern de manière implicite
  // le premier `..` est équivalent à `..`, le deuxième à `..` et ainsi de suite
  // Cette notation est plutôt indiquée lorsque qu’il n’y a qu’un seul groupe capturé afin
  // d’éviter les ambiguïtés
  | ..o-.. / +AdjN => ..o-@(..)
  | ..-.. / +AdjN => @(..)-@(..)
  | ..-.. / +NAdj => @(..)-@(..)

  | ..-.. / +AdvN => ..-@(..)
}

lexicon Nom-Exceptions @N {

  festival / +Masc +Exn ;

}

// `@V` signifie que la catégorie `V` est affectée au mot en entrée de ce lexique
lexicon VG1 @V +G1 {

  manger ;
  tracer ;
  danser ;

}

rewrite présent-indicatif1 @V +G1 -Exn => +Sg +1ère +Prés +Ind {
  // ce cas signifie que le suffixe `r` (noté `..r`, un préfixe est noté `r..`)
  // est remplacé par une transition vide
  // qui ajoute les traits +Sg et +1ère
  // ainsi `mange` est annoté comme suit:
  // `manger{V +G1 +Prés +Ind +Sg +1ère}`
  // cette règle est équivalente à la suite de transitions suivante :
  // `mange _:r @V +G1 +Prés +Ind +Sg +1ère`
  ..er => ..e
}
rewrite présent-indicatif2 @V +G1 -Exn => +Sg +2ème +Prés +Ind {
  ..er => ..es
}
rewrite présent-indicatif3 @V +G1 => +Sg +3ème +Prés +Ind {
  // avec cette règle nous voyons que `mange` est annoté comme
  // {V +G1 +Prés +Ind +Sg +1ère} et comme
  // {V +G1 +Prés +Ind +Sg +3ème}
  ..er => ..e
}
rewrite présent-indicatif4  @V +G1 -Exn => +Pl +1ère +Prés +Ind {
  // ici nous écrivons un patron plus complexe avec des sous-cas
  // les sous-cas sont appliqués en séquence, et le premier qui correspond
  // est choisi. Si aucun ne correspond la règle ne s'applique pas ici.
  // contrairement aux `rule`s dont l'ordre n'a pas d'importance, il faut veiller
  // ici à correctement ordonner les cas afin que les plus spécifiques arrivent avant
  // les plus généraux
  ..ger => ..geons
  | ..cer => ..çons
  | ..er => ..ons
}
rewrite présent-indicatif5 @V +G1 -Exn => +Pl +2ème +Prés +Ind {
  ..er => ..ez
}
rewrite présent-indicatif6 @V +G1 -Exn => +Pl +3ème +Prés +Ind {
  ..er => ..ent
}

rewrite futur-indicatif1 @V +G1 -Exn => +Sg +1ère +Fut +Ind {
  ..er => ..erai
}  
rewrite futur-indicatif2 @V +G1 -Exn => +Sg +2ème +Fut +Ind {
  ..er => ..eras
}
rewrite futur-indicatif3 @V +G1 -Exn => +Sg +3ème +Fut +Ind {
  ..er => ..era
}
rewrite futur-indicatif4 @V +G1 -Exn => +Pl +1ère +Fut +Ind {
  ..er => ..erons
}
rewrite futur-indicatif5 @V +G1 -Exn => +Pl +2ème +Fut +Ind {
  ..er => ..erez
}
rewrite futur-indicatif6 @V +G1 -Exn => +Pl +3ème +Fut +Ind {
  ..er => ..eront
}

rewrite passé-simple-indicatif1 @V +G1 -Exn => +Sg +1ère +PassSimp +Ind {
  ..ger => ..geai
  | ..cer => ..çai
  | ..er => ..ai
}
rewrite passé-simple-indicatif2 @V +G1 -Exn => +Sg +2ème +PassSimp +Ind {
  ..ger => ..geas
  | ..cer => ..ças
  | ..er => ..as
}
rewrite passé-simple-indicatif3 @V +G1 -Exn => +Sg +3ème +PassSimp +Ind {
  ..ger => ..gea
  | ..cer => ..ça
  | ..er => ..a
}
rewrite passé-simple-indicatif4 @V +G1 -Exn => +Pl +1ère +PassSimp +Ind {
  ..ger => ..geâmes
  | ..cer => ..çâmes
  | ..er => ..âmes
}
rewrite passé-simple-indicatif5 @V +G1 -Exn => +Pl +2ème +PassSimp +Ind {
  ..ger => ..geâtes
  | ..cer => ..çâtes
  | ..er => ..âtes
}
rewrite passé-simple-indicatif6 @V +G1 -Exn => +Pl +3ème +PassSimp +Ind {
  ..er => ..èrent
}

rewrite imparfait-indicatif1 @V +G1 -Exn => +Sg +1ère +Imp +Ind {
  ..ger => ..geais
  | ..cer => ..çais
  | ..er => ..ais
}
rewrite imparfait-indicatif2 @V +G1 -Exn => +Sg +2ème +Imp +Ind {
  ..ger => ..geais
  | ..cer => ..çais
  | ..er => ..ais
}
rewrite imparfait-indicatif3 @V +G1 -Exn => +Sg +3ème +Imp +Ind {
  ..ger => ..geait
  | ..cer => ..çait
  | ..er => ..ait
}
rewrite imparfait-indicatif4 @V +G1 -Exn => +Pl +1ère +Imp +Ind {
  ..er => ..ions
}
rewrite imparfait-indicatif5 @V +G1 -Exn => +Pl +2ème +Imp +Ind {
  ..er => ..iez
}
rewrite imparfait-indicatif6 @V +G1 -Exn => +Pl +3ème +Imp +Ind {
  ..ger => ..geaient
  | ..cer => ..çaient
  | ..er => ..aient
}
